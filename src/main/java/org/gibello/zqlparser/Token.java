/*
 * This file is part of Zql.
 *
 * Zql is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Zql is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Zql.  If not, see http://www.gnu.org/licenses.
 */

/* Generated By:JavaCC: Do not edit this line. Token.java Version 3.0 */
package org.gibello.zqlparser;

/**
 * Describes the input token stream.
 * 
 * @author Bogdan Mariesan, Romania Autogenerated.
 */
public class Token {

	/**
	 * An integer that describes the kind of this token. This numbering system is determined by JavaCCParser, and a
	 * table of these numbers is stored in the file ...Constants.java.
	 */
	private int		kind;

	/**
	 * beginLine and beginColumn describe the position of the first character of this token.
	 */
	private int		beginLine;

	/**
	 * beginLine and beginColumn describe the position of the first character of this token.
	 */
	private int		beginColumn;

	/**
	 * endLine and endColumn describe the position of the last character of this token.
	 */
	private int		endLine;

	/**
	 * endLine and endColumn describe the position of the last character of this token.
	 */
	private int		endColumn;

	/**
	 * The string image of the token.
	 */
	private String	image;

	/**
	 * A reference to the next regular (non-special) token from the input stream. If this is the last token from the
	 * input stream, or if the token manager has not read tokens beyond this one, this field is set to null. This is
	 * true only if this token is also a regular token. Otherwise, see below for a description of the contents of this
	 * field.
	 */
	private Token	next;

	/**
	 * This field is used to access special tokens that occur prior to this token, but after the immediately preceding
	 * regular (non-special) token. If there are no such special tokens, this field is set to null. When there are more
	 * than one such special token, this field refers to the last of these special tokens, which in turn refers to the
	 * next previous special token through its specialToken field, and so on until the first special token (whose
	 * specialToken field is null). The next fields of special tokens refer to other special tokens that immediately
	 * follow it (without an intervening regular token). If there is no such token, this field is null.
	 */
	private Token	specialToken;

	/**
	 * Default constructor.
	 */
	Token() {

	}

	/**
	 * Returns the image.
	 * 
	 * @return the image.
	 */
	public String toString() {
		return this.image;
	}

	/**
	 * Returns a new Token object, by default. However, if you want, you can create and return subclass objects based on
	 * the value of ofKind. Simply add the cases to the switch for all those special cases. For example, if you have a
	 * subclass of Token called IDToken that you want to create if ofKind is ID, simlpy add something like : case
	 * MyParserConstants.ID : return new IDToken(); to the following switch statement. Then you can cast matchedToken
	 * variable to the appropriate type and use it in your lexical actions.
	 * 
	 * @param ofKind
	 *            type of token.
	 * @return the token.
	 */
	public static final Token newToken(final int ofKind) {
		switch (ofKind) {
			default:
				return new Token();
		}
	}

	/**
	 * @return the kind
	 */
	public int getKind() {
		return this.kind;
	}

	/**
	 * @param kind
	 *            the kind to set
	 */
	public void setKind(final int kind) {
		this.kind = kind;
	}

	/**
	 * @return the beginLine
	 */
	public int getBeginLine() {
		return this.beginLine;
	}

	/**
	 * @param beginLine
	 *            the beginLine to set
	 */
	public void setBeginLine(final int beginLine) {
		this.beginLine = beginLine;
	}

	/**
	 * @return the beginColumn
	 */
	public int getBeginColumn() {
		return this.beginColumn;
	}

	/**
	 * @param beginColumn
	 *            the beginColumn to set
	 */
	public void setBeginColumn(final int beginColumn) {
		this.beginColumn = beginColumn;
	}

	/**
	 * @return the endLine
	 */
	public int getEndLine() {
		return this.endLine;
	}

	/**
	 * @param endLine
	 *            the endLine to set
	 */
	public void setEndLine(final int endLine) {
		this.endLine = endLine;
	}

	/**
	 * @return the endColumn
	 */
	public int getEndColumn() {
		return this.endColumn;
	}

	/**
	 * @param endColumn
	 *            the endColumn to set
	 */
	public void setEndColumn(final int endColumn) {
		this.endColumn = endColumn;
	}

	/**
	 * @return the image
	 */
	public String getImage() {
		return this.image;
	}

	/**
	 * @param image
	 *            the image to set
	 */
	public void setImage(final String image) {
		this.image = image;
	}

	/**
	 * @return the next
	 */
	public Token getNext() {
		return this.next;
	}

	/**
	 * @param next
	 *            the next to set
	 */
	public void setNext(final Token next) {
		this.next = next;
	}

	/**
	 * @return the specialToken
	 */
	public Token getSpecialToken() {
		return this.specialToken;
	}

	/**
	 * @param specialToken
	 *            the specialToken to set
	 */
	public void setSpecialToken(final Token specialToken) {
		this.specialToken = specialToken;
	}

}
