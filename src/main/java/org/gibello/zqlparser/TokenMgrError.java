/*
 * This file is part of Zql.
 *
 * Zql is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Zql is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Zql.  If not, see http://www.gnu.org/licenses.
 */

/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 3.0 */
package org.gibello.zqlparser;

/**
 * @author Bogdan Mariesan, Romania Autogenerated.
 */
public class TokenMgrError extends Error {

	/*
	 * Ordinals for various reasons why an Error of this type can be thrown.
	 */
	/**
	 * Escaped commas.
	 */
	private static final String	ESCAPED_COMMAS			= "\"";

	/**
	 * Magic number.
	 */
	private static final int	MAGIC_NUMBER_4			= 4;

	/**
	 * Magic number.
	 */
	private static final int	MAGIC_NUMBER_16			= 16;

	/**
	 * Hexa magic number.
	 */
	private static final int	MAGIC_NUMBER_HEXA_0X7E	= 0x7e;

	/**
	 * Hexa magic number.
	 */
	private static final int	MAGIC_NUMBER_HEXA_0X20	= 0x20;

	/**
	 * The default serial version id.
	 */
	private static final long	serialVersionUID		= 1L;

	/**
	 * Lexical error occured.
	 */
	static final int			LEXICAL_ERROR			= 0;

	/**
	 * An attempt wass made to create a second instance of a static token manager.
	 */
	static final int			STATIC_LEXER_ERROR		= 1;

	/**
	 * Tried to change to an invalid lexical state.
	 */
	static final int			INVALID_LEXICAL_STATE	= 2;

	/**
	 * Detected (and bailed out of) an infinite loop in the token manager.
	 */
	static final int			LOOP_DETECTED			= 3;

	/**
	 * Indicates the reason why the exception is thrown. It will have one of the above 4 values.
	 */
	private int					errorCode;

	/**
	 * Replaces unprintable characters by their espaced (or unicode escaped) equivalents in the given string.
	 * 
	 * @param str
	 *            the unprintable character string.
	 * @return the processed string.
	 */
	protected static final String addEscapes(final String str) {
		final StringBuffer retval = new StringBuffer();
		char ch;
		for (int i = 0; i < str.length(); i++) {
			switch (str.charAt(i)) {
				case 0:
					continue;
				case '\b':
					retval.append("\\b");
					continue;
				case '\t':
					retval.append("\\t");
					continue;
				case '\n':
					retval.append("\\n");
					continue;
				case '\f':
					retval.append("\\f");
					continue;
				case '\r':
					retval.append("\\r");
					continue;
				case '\"':
					retval.append("\\\"");
					continue;
				case '\'':
					retval.append("\\\'");
					continue;
				case '\\':
					retval.append("\\\\");
					continue;
				default:
					ch = str.charAt(i);
					if (ch < TokenMgrError.MAGIC_NUMBER_HEXA_0X20 || ch > TokenMgrError.MAGIC_NUMBER_HEXA_0X7E) {
						final String s = "0000" + Integer.toString(ch, TokenMgrError.MAGIC_NUMBER_16);
						retval.append("\\u" + s.substring(s.length() - TokenMgrError.MAGIC_NUMBER_4, s.length()));
					} else {
						retval.append(ch);
					}
					continue;
			}
		}
		return retval.toString();
	}

	/**
	 * Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error.
	 * Parameters : EOFSeen : indicates if EOF caused the lexicl error curLexState : lexical state in which this error
	 * occured errorLine : line number when the error occured errorColumn : column number when the error occured
	 * errorAfter : prefix that was seen before this error occured curchar : the offending character Note: You can
	 * customize the lexical error message by modifying this method.
	 * 
	 * @param eofSeen
	 *            end of file seen.
	 * @param lexState
	 *            the lexical state.
	 * @param errorLine
	 *            the error line.
	 * @param errorColumn
	 *            the error colum.
	 * @param errorAfter
	 *            error after.
	 * @param curChar
	 *            the current char.
	 * @return the error message.
	 */
	protected static String lexicalError(final boolean eofSeen, final int lexState, final int errorLine,
			final int errorColumn, final String errorAfter, final char curChar) {
		final StringBuilder endOfFileMessage = new StringBuilder();

		if (eofSeen) {
			endOfFileMessage.append("<EOF> ");
		} else {
			endOfFileMessage.append(TokenMgrError.ESCAPED_COMMAS);
			endOfFileMessage.append(TokenMgrError.addEscapes(String.valueOf(curChar)));
			endOfFileMessage.append(TokenMgrError.ESCAPED_COMMAS);
			endOfFileMessage.append(" (");
			endOfFileMessage.append((int) curChar);
			endOfFileMessage.append("), ");
		}

		return "Lexical error at line " + errorLine + ", column " + errorColumn + ".  Encountered: " + endOfFileMessage
				+ "after : \"" + addEscapes(errorAfter) + TokenMgrError.ESCAPED_COMMAS;
	}

	/**
	 * You can also modify the body of this method to customize your error messages. For example, cases like
	 * LOOP_DETECTED and INVALID_LEXICAL_STATE are not of end-users concern, so you can return something like :
	 * "Internal Error : Please file a bug report .... " from this method for such cases in the release version of your
	 * parser.
	 * 
	 * @return the error message.
	 */
	public String getMessage() {
		return super.getMessage();
	}

	/*
	 * Constructors of various flavors follow.
	 */

	/**
	 * Default constructor.
	 */
	public TokenMgrError() {

	}

	/**
	 * Constructor.
	 * 
	 * @param message
	 *            the error message.
	 * @param reason
	 *            the reason.
	 */
	public TokenMgrError(final String message, final int reason) {
		super(message);
		this.errorCode = reason;
	}

	/**
	 * Constructor.
	 * 
	 * @param eofSeen
	 *            end of file seen.
	 * @param lexState
	 *            lexical state.
	 * @param errorLine
	 *            the error line.
	 * @param errorColumn
	 *            the error column.
	 * @param errorAfter
	 *            error after.
	 * @param curChar
	 *            the current char.
	 * @param reason
	 *            the reason.
	 */
	public TokenMgrError(final boolean eofSeen, final int lexState, final int errorLine, final int errorColumn,
			final String errorAfter, final char curChar, final int reason) {
		this(lexicalError(eofSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
	}

	/**
	 * @return the errorCode
	 */
	public int getErrorCode() {
		return this.errorCode;
	}

	/**
	 * @param errorCode
	 *            the errorCode to set
	 */
	public void setErrorCode(final int errorCode) {
		this.errorCode = errorCode;
	}
}
